'use strict';

document.addEventListener('DOMContentLoaded', () => {
    // DOM Element Selection
    const inputFileEl = document.getElementById('inputFilePlaceholder'); // Corrected ID based on HTML
    const outputFileEl = document.getElementById('outputFilePlaceholder'); // Corrected ID based on HTML
    const resolutionEl = document.getElementById('resolution');
    const videoCodecEl = document.getElementById('videoCodec');
    const audioCodecEl = document.getElementById('audioCodec');
    const videoBitrateEl = document.getElementById('videoBitrate'); 
    const generateBtn = document.getElementById('generateBtn');
    const windowsScriptArea = document.getElementById('windowsScript'); 
    const linuxScriptArea = document.getElementById('linuxScript');   
    const copyWindowsBtn = document.getElementById('copyWindowsBtn');
    const copyLinuxBtn = document.getElementById('copyLinuxBtn');

    // Function to safely quote a filename if it contains spaces
    function quoteFilename(filename) {
        // For shell script generation, we might use more robust quoting like "'$(printf '%q' "$filename")'"
        // but for simple display and direct ffmpeg command, simple double quotes are a common approach.
        // If the filename already seems quoted, don't double quote. This is a simple check.
        if (filename.includes(' ') && !filename.startsWith('"') && !filename.endsWith('"')) {
            return `"${filename}"`;
        }
        return filename;
    }
    
    // generateFfmpegCommand Function
    function generateFfmpegCommand(params) {
        const commandParts = ['ffmpeg', '-y']; // Start with ffmpeg and -y for overwrite

        // Input file - always quote if it might have spaces
        commandParts.push('-i', quoteFilename(params.inputFile));

        if (params.resolution) {
            commandParts.push('-s', params.resolution);
        }
        if (params.videoCodec) {
            commandParts.push('-c:v', params.videoCodec);
        }
        // Provide default video codec if none is specified
        else {
            commandParts.push('-c:v', 'libx264'); 
        }

        if (params.audioCodec) {
            commandParts.push('-c:a', params.audioCodec);
        }
        // Provide default audio codec if none is specified
        else {
            commandParts.push('-c:a', 'aac');
        }

        if (params.bitrate) {
            commandParts.push('-b:v', params.bitrate);
        }

        // Output file - always quote if it might have spaces
        commandParts.push(quoteFilename(params.outputFile));

        return commandParts.join(' ');
    }

    // generateWindowsScript Function
    function generateWindowsScript(ffmpegCommand, params) {
        // Using template literals for multi-line string
        const script = `@echo off
REM FFMPEG Video Conversion Script generated by FFMPEG Script Generator
REM Input File Placeholder: ${params.inputFile}
REM Output File Placeholder: ${params.outputFile}

echo.
echo Starting video conversion...
echo Input: ${params.inputFile}
echo Output: ${params.outputFile}
echo.

${ffmpegCommand}

echo.
echo Conversion process finished.
echo Check for errors above.
echo.
pause
`;
        return script;
    }

    // generateLinuxScript Function
    function generateLinuxScript(ffmpegCommand, params) {
        // Using template literals for multi-line string
        const script = `#!/bin/bash
# FFMPEG Video Conversion Script generated by FFMPEG Script Generator
# Input File Placeholder: ${params.inputFile}
# Output File Placeholder: ${params.outputFile}

echo ""
echo "Starting video conversion..."
echo "Input: ${params.inputFile}"
echo "Output: ${params.outputFile}"
echo ""

${ffmpegCommand}

echo ""
echo "Conversion process finished."
echo "Check for errors above."
`;
        return script;
    }

    function copyToClipboard(textareaId, buttonId) {
        const textarea = document.getElementById(textareaId);
        const button = document.getElementById(buttonId);

        if (!textarea || !button) {
            console.error("Error: Textarea or button not found for copy operation.", textareaId, buttonId);
            alert('Error setting up copy functionality.');
            return;
        }

        if (!navigator.clipboard) {
            alert('Clipboard API not available in your browser. Please copy manually.');
            // Fallback for older browsers (select text)
            textarea.select();
            document.execCommand('copy'); // Deprecated, but a fallback
            button.textContent = 'Selected!'; // Indicate selection for manual copy
            setTimeout(() => {
                button.textContent = buttonId === 'copyWindowsBtn' ? 'Copy Windows Script' : 'Copy Linux Script';
            }, 3000);
            return;
        }

        navigator.clipboard.writeText(textarea.value)
            .then(() => {
                const originalText = button.textContent;
                button.textContent = 'Copied!';
                button.disabled = true; // Disable button briefly
                setTimeout(() => {
                    button.textContent = originalText;
                    button.disabled = false;
                }, 2000); // Revert after 2 seconds
            })
            .catch(err => {
                console.error('Failed to copy text: ', err);
                alert('Failed to copy text. See console for details. Please copy manually.');
                // Fallback for cases where writeText might fail (e.g. if not in secure context)
                textarea.select();
                document.execCommand('copy');
                button.textContent = 'Selected!'; 
                setTimeout(() => {
                    button.textContent = buttonId === 'copyWindowsBtn' ? 'Copy Windows Script' : 'Copy Linux Script';
                }, 3000);
            });
    }


    // Event Listener for "Generate Scripts" Button
    if (generateBtn) {
        generateBtn.addEventListener('click', handleGenerateScripts);
    } else {
        console.error("Error: Generate button not found. Check generateBtn ID.");
    }

    // Event Listeners for Copy Buttons
    if (copyWindowsBtn) {
        copyWindowsBtn.addEventListener('click', () => copyToClipboard('windowsScript', 'copyWindowsBtn'));
    } else {
        console.error("Error: Copy Windows button not found. Check copyWindowsBtn ID.");
    }

    if (copyLinuxBtn) {
        copyLinuxBtn.addEventListener('click', () => copyToClipboard('linuxScript', 'copyLinuxBtn'));
    } else {
        console.error("Error: Copy Linux button not found. Check copyLinuxBtn ID.");
    }

    // handleGenerateScripts Function
    function handleGenerateScripts() {
        // Retrieve values from input fields
        const inputFileVal = inputFileEl.value.trim();
        const outputFileVal = outputFileEl.value.trim();
        const resolutionVal = resolutionEl.value.trim();
        const videoCodecVal = videoCodecEl.value.trim();
        const audioCodecVal = audioCodecEl.value.trim();
        const bitrateVal = videoBitrateEl.value.trim();

        // Basic Validation
        if (!inputFileVal) {
            alert("Input File Placeholder Name cannot be empty.");
            return;
        }
        if (!outputFileVal) {
            alert("Output File Placeholder Name cannot be empty.");
            return;
        }

        // Store gathered values in an object
        const params = {
            inputFile: inputFileVal,
            outputFile: outputFileVal,
            resolution: resolutionVal,
            videoCodec: videoCodecVal, // This could be empty if user clears it
            audioCodec: audioCodecVal, // This could be empty if user clears it
            bitrate: bitrateVal
        };

        // Log collected parameters
        console.log("Collected Parameters:", params);

        // Generate FFMPEG command
        const ffmpegCommand = generateFfmpegCommand(params);
        console.log("Generated FFMPEG Command:", ffmpegCommand);

        // Generate Windows Batch Script
        const windowsBatchScript = generateWindowsScript(ffmpegCommand, params);
        
        // Generate Linux Shell Script
        const linuxShellScript = generateLinuxScript(ffmpegCommand, params);

        // Update textareas
        if (windowsScriptArea && linuxScriptArea) {
            windowsScriptArea.value = windowsBatchScript;
            linuxScriptArea.value = linuxShellScript;
        } else {
            console.error("Error: Script output textareas not found. Check element IDs.");
        }
    }
});
